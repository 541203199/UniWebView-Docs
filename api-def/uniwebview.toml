title = "UniWebView"
file = "uniwebview"

[[Properties]]
name = "Frame"
returnType = "Rect"
hasSetter = true
summary = """Get or Set the frame of current web view. The value is based on current `Screen.width` and `Screen.height`.
The first two values of `Rect` is `x` and `y` position and the followed two `width` and `height`. The original point is top left corner:

![](https://docs.unity3d.com/StaticFiles/ScriptRefImages/RectXY.svg)
"""
example = """
```csharp
// Make the web view full screen:
webView.Frame = new Rect(0, 0, Screen.width, Screen.height);

// Make the web view center in the screen with size 500x500:
var side = 500;
var x = (Screen.width - side) / 2.0f;
var y = (Screen.height - side) / 2.0f;
webView.Frame = new Rect(x, y, side, side);
```
"""
notice = "`Frame` will be ignored if `ReferenceRectTransform` is set."

[[Properties]]
name = "ReferenceRectTransform"
returnType = "RectTransform"
hasSetter = true
summary = """
A reference rect transform which the web view should change its position and size to.

Set it to a Unity UI element (which contains a `RectTransform`) under a canvas to determine 
the web view frame by a certain UI element. 

By using this, you could get benefit from [Multiple Resolutions UI](https://docs.unity3d.com/Manual/HOWTO-UIMultiResolution.html).
"""
example = """
```csharp
// Some panel
RectTransform panel = ...

// Set the web view position and size to match panel
webView.ReferenceRectTransform = panel;
```
"""

[[Properties]]
name = "Url"
returnType = "string"
hasSetter = false
summary = "The url of current loaded web page."
example = """
```csharp
webView.Load("https://example.com/");

// Some time later or in "OnPageFinished":
print(webView.Url);
// => "https://example.com/"
```
"""

[[Properties]]
name = "CanGoBack"
returnType = "bool"
hasSetter = false
summary = "Gets whether there is a back page in the back-forward list that can be navigated to."

[[Properties]]
name = "CanGoForward"
returnType = "bool"
hasSetter = false
summary = "Gets whether there is a forward page in the back-forward list that can be navigated to."

[[Methods]]
name = "Load"
syntax = "Load(string url)"
returnType = "void"
summary = "Load a url in current web view."
example = """
```csharp
webView.Load("https://example.com");
```
"""
[[Methods.parameters]]
name = "url"
type = "string"
summary = "The url to be loaded. This url should start with `http://` or `https://` scheme. You could even load a non-ascii url text if it is valid."

[[Methods]]
name = "LoadHTMLString"
syntax = "LoadHTMLString(string htmlString, string baseUrl)"
returnType = "void"
summary = "Load an HTML string in current web view."
example = """
```csharp
webView.LoadHTMLString("<p>Hello World</p>", "https://domain.com");
```
"""

[[Methods.parameters]]
name = "htmlString"
type = "string"
summary = "The HTML string to use as the contents of the webpage."

[[Methods.parameters]]
name = "baseUrl"
type = "string"
summary = "The url to use as the page's base url."

[[Methods]]
name = "Reload"
syntax = "Reload()"
returnType = "void"
summary = "Reloads the current page."

[[Methods]]
name = "Stop"
syntax = "Stop()"
returnType = "void"
summary = "Stops loading all resources on the current page."

[[Methods]]
name = "GoBack"
syntax = "GoBack()"
returnType = "void"
summary = "Navigates to the back item in the back-forward list."
example = """
```csharp
if (webView.CanGoBack) {
    webView.GoBack();
}
```
"""

[[Methods]]
name = "GoForward"
syntax = "GoForward()"
returnType = "void"
summary = "Navigates to the forward item in the back-forward list."
example = """
```csharp
if (webView.CanGoForward) {
    webView.GoForward();
}
```
"""

[[Methods]]
name = "SetOpenLinksInExternalBrowser"
syntax = "SetOpenLinksInExternalBrowser(bool flag)"
returnType = "void"
summary = """
Sets whether the link clicking in the web view should open the page in an external browser.

By default, when user clicks a link, it will be opened in the same web view. After setting this with `true`, 
the user will be navigated to an external native browser.

On iOS, the mobile Safari; on Android, the default browser like Chrome; on macOS Editor, the default browser of your system will be used.
"""
example = """
```csharp
// You may want to set it in OnPageFinished event, 
// otherwise the original page will be also opened externally
webView.OnPageFinished += (view, statusCode, url) => {
    webView.SetOpenLinksInExternalBrowser(true);
};
```
"""
[[Methods.parameters]]
name = "flag"
type = "bool"
summary = "The flag indicates whether a link should be opened externally."

[[Methods]]
name = "Show"
syntax = "Show(bool fade, UniWebViewTransitionEdge edge, float duration, Action completionHandler)"
returnType = "bool"
returnValue = "A `bool` value indicates whether the showing operation started."
summary = """Sets the web view visible on screen.

If you pass `false` and `UniWebViewTransitionEdge.None` to the first two parameters, it means no animation 
will be applied when showing. So the `duration` parameter will not be taken into account. Otherwise, when 
either or both `fade` and `edge` set, the showing operation will be animated.

Regardless of there is an animation or not, the `completionHandler` will be called if not `null` when the web view
showing finishes.
"""
example = """
```csharp
// Show the web view without animation
webView.Show();

// Show the web view with a fade animation
webView.Show(true);

// Show the web view with a modal presenting animation from screen bottom
webView.Show(false, UniWebViewTransitionEdge.Bottom);

// Print a message after the web view shown with animation
webView.Show(true, UniWebViewTransitionEdge.Top, 0.25f, ()=> {
    print("Show transition finished!");
});
```
"""
[[Methods.parameters]]
name = "fade"
type = "bool"
summary = "Whether show with a fade in animation. Default is `false`."
[[Methods.parameters]]
name = "edge"
type = "UniWebViewTransitionEdge"
summary = "The edge from which the web view showing. It simulates a modal effect when showing a web view. Default is `UniWebViewTransitionEdge.None`."
[[Methods.parameters]]
name = "duration"
type = "float"
summary = "Duration of showing animation. Default is `0.4f`."
[[Methods.parameters]]
name = "completionHandler"
type = "Action"
summary = "Completion handler which will be called when showing finishes. Default is `null`."

[[Methods]]
name = "Hide"
syntax = "Hide(bool fade, UniWebViewTransitionEdge edge, float duration, Action completionHandler)"
returnType = "bool"
returnValue = "A `bool` value indicates whether the hiding operation started."
summary = """Sets the web view invisible from screen.

If you pass `false` and `UniWebViewTransitionEdge.None` to the first two parameters, it means no animation 
will be applied when hiding. So the `duration` parameter will not be taken into account. Otherwise, when 
either or both `fade` and `edge` set, the hiding operation will be animated.

Regardless there is an animation or not, the `completionHandler` will be called if not `null` when the web view
hiding finishes.
"""
notice = """Hiding the web view does not destroy or release it. You could always call `Show` on the web view again to make it visible.

To release a web view and its resource, pass the web view component as the parameter of `Destroy`.
"""
example = """
```csharp
// Hide the web view without animation
webView.Hide();

// Hide the web view with a fade animation
webView.Hide(true);

// Hide the web view with a modal presenting animation from screen bottom
webView.Hide(false, UniWebViewTransitionEdge.Bottom);

// Print a message after the web view hidden with animation
webView.Hide(true, UniWebViewTransitionEdge.Top, 0.25f, ()=> {
    print("Hide transition finished!");
});
```
"""
[[Methods.parameters]]
name = "fade"
type = "bool"
summary = "Whether hide with a fade in animation. Default is `false`."
[[Methods.parameters]]
name = "edge"
type = "UniWebViewTransitionEdge"
summary = "The edge from which the web view hiding. It simulates a modal effect when hiding a web view. Default is `UniWebViewTransitionEdge.None`."
[[Methods.parameters]]
name = "duration"
type = "float"
summary = "Duration of hiding animation. Default is `0.4f`."
[[Methods.parameters]]
name = "completionHandler"
type = "Action"
summary = "Completion handler which will be called when hiding finishes. Default is `null`."

[[Methods]]
name = "AnimateTo"
syntax = "AnimateTo(Rect frame, float duration, float delay, Action completionHandler)"
returnType = "bool"
returnValue = "A `bool` value indicates whether the animation started."
summary = "Animates the web view from current `Frame` (position and size) to another `Frame` (position and size) within `duration`."
example = """
```csharp
// Animate current web view to cover half of the screen.
var halfScreen = new Rect(0, 0, Screen.width / 2, Screen.height / 2);
webView.AnimateTo(halfScreen, 0.4f, 0.1f, () => {
    print("Aniamtion finished!");
});
```
"""
[[Methods.parameters]]
name = "frame"
type = "Rect"
summary = "The new `Frame` which the web view should be."
[[Methods.parameters]]
name = "duration"
type = "float"
summary = "Duration of the animation."
[[Methods.parameters]]
name = "delay"
type = "float"
summary = "Delay before the animation begins. Default is `0.0f`, which means the animation will start immediately."
[[Methods.parameters]]
name = "completionHandler"
type = "Action"
summary = "Completion handler which will be called when animation finishes. Default is `null`."

[[Methods]]
name = "AddJavaScript"
syntax = "AddJavaScript(string jsString, Action<UniWebViewNativeResultPayload> completionHandler)"
returnType = "void"
summary = """
Adds a JavaScript to current page. Normally, you add a JavaScript function or variable with this method.

The input `jsString` will be executed by current web view. If succeeded, the input JavaScript code will "inject" 
to the web view and a `UniWebViewNativeResultPayload` with `resultCode` being "0" will passed to the `completionHandler`.
"""
example = """
```csharp
webView.AddJavaScript("function add() { return 1 + 2; }", (payload)=>{
    if (result.resultCode.Equal("0")) {
        ptint("JavaScript adding finished without problem.");
    }
});
```
"""
[[Methods.parameters]]
name = "jsString"
type = "string"
summary = "The JavaScript code to add. It should be a valid JavaScript statement string."
[[Methods.parameters]]
name = "completionHandler"
type = "Action<UniWebViewNativeResultPayload>"
summary = "Called when adding JavaScript operation finishes. Default is `null`. If everything goes fine and the `jsString` added to current web view, `resultCode` would be \"0\""

[[Methods]]
name = "EvaluateJavaScript"
syntax = "EvaluateJavaScript(string jsString, Action<UniWebViewNativeResultPayload> completionHandler)"
returnType = "void"
summary = """Evaluates a JavaScript string on current page. Normally you execute a certain JavaScript function or get a variable by this method.

The input `jsString` will be executed by current web view. Executing result will be sent back to you in the `completionHandler`. You could access the `data` member of `UniWebViewNativeResultPayload` passed in to get the JavaScript function return value.
"""
example = """
```csharp
// Pop up an alert from web view.
webView.EvaluateJavaScript("alert('Alert!');", (payload)=>{
    print(payload.resultCode); // => "0"
    print(payload.data); // => ""
});

// Adding two numbers by a JavaScript function.
webView.AddJavaScript("function add(a, b) { return a + b; }", completionHandler: _ => {
    webView.EvaluateJavaScript("add(4, 5);", completionHandler: (payload) => {
        print(payload.resultCode); // => "0"
        print(payload.data);  // => "9"
    });
});

// Call a JavaScript function not existing.
webView.EvaluateJavaScript("functionNotExisting()", completionHandler: (payload) => {
    print(payload.resultCode);
    // a non-zero value which indicates JavaScript error code.
    // eg. "4" on iOS.
});
```
"""
[[Methods.parameters]]
name = "jsString"
type = "string"
summary = "The JavaScript string to evaluate."
[[Methods.parameters]]
name = "completionHandler"
type = "Action<UniWebViewNativeResultPayload>"
summary = "Called when evaluating JavaScript operation finishes. Default is `null`. If everything goes find, the `resultCode` would be \"0\" and the return value of invoked JavaScript is contained in `data`."

[[Methods]]
name = "AddUrlScheme"
syntax = "AddUrlScheme(string scheme)"
returnType = "void"
summary = "Adds a url scheme to UniWebView message system interpreter. All following url navigation to this scheme will be sent as a message to UniWebView instead."
example = """
```csharp
// Add "myscheme" as a UniWebView message scheme.
webView.AddUrlScheme("myscheme");

// A link like "myscheme://action" will be treated as a message and raise the `OnMessageReceived` event from now.
```
"""
[[Methods.parameters]]
name = "scheme"
type = "string"
summary = "The url scheme to add. It should not contain \"://\" part. You could even add \"http\" and/or \"https\" to prevent all resource loading on the page. \"uniwebview\" is added by default. Nothing will happen if you try to add a dulplicated scheme."

[[Methods]]
name = "RemoveUrlScheme"
syntax = "RemoveUrlScheme(string scheme)"
returnType = "void"
summary = "Removes a url scheme from UniWebView message system interpreter."
example = """
```csharp
webView.RemoveUrlScheme("myscheme");
```
"""
[[Methods.parameters]]
name = "scheme"
type = "string"
summary = "The url scheme to remove. Nothing will happen if the scheme is not in the message system."

[[Methods]]
name = "AddSslExceptionDomain"
syntax = "AddSslExceptionDomain(string domain)"
returnType = "void"
summary = """
Adds a domain to the SSL checking white list.

If you are trying to access a web site with untrusted or expired certification, 
the web view will prevent its loading. If you could confirm that this site is trusted,
you can add the domain as an SSL exception, so you could visit it.
"""
notice = "We strongly suggest you to upgrade your site certification to a trusted one. It would be dangerous to add a site as SSL exception and your user might be exposed to the risk of Man-in-the-middle attack. You should know exactly what you will do before adding a domain to white list."
example = """
```csharp
// This loading will fail since the certification is a self signed one and not trusted.
webView.Load("https://self-signed.badssl.com/"); 

// Add "self-signed.badssl.com" as trusted.
webView.AddSslExceptionDomain("self-signed.badssl.com");
// This page should load now.
webView.Load("https://self-signed.badssl.com/"); 
```
"""
[[Methods.parameters]]
name = "domain"
type = "string"
summary = "The domain to add. It should not contain any scheme or path part in url."

[[Methods]]
name = "RemoveSslExceptionDomain"
syntax = "RemoveSslExceptionDomain(string domain)"
returnType = "void"
summary = "Removes a domain from the SSL checking white list."
example = """
```csharp
webView.RemoveSslExceptionDomain("self-signed.badssl.com");
```
"""
[[Methods.parameters]]
name = "domain"
type = "string"
summary = "The domain to remove. It should not contain any scheme or path part in url."

[[Methods]]
name = "SetHeaderField"
syntax = "SetHeaderField(string key, string value)"
returnType = "void"
summary = """
Sets a customized header field for web view requests.

The header field will be used for all subsequence reqeust. 
Pass `null` as value to unset a header field.

Some reserved headers like user agent are not be able to override by setting here, 
use the `SetUserAgent` method for them instead.
"""
example = """
```csharp
// Set "MyToken" field to "123abc" in a web view. It will be used for all following requests.
webView.SetHeaderField("MyToken", "123abc");

// Unset it
webView.SetHeaderField("MyToken", null);
```
"""
[[Methods.parameters]]
name = "key"
type = "string"
summary = "The key of customized header field."
[[Methods.parameters]]
name = "value"
type = "string"
summary = "The value of customized header field. `null` if you want to unset the field."

[[Methods]]
name = "SetUserAgent"
syntax = "SetUserAgent(string agent)"
returnType = "void"
summary = "Sets the user agent used in the web view. If the string is null or empty, the system default value will be used."
example = """
```csharp
// Set the user agent string sent in request header.
webView.SetUserAgent("My-Amazion-App/1.0.0 (iOS 10.3, iPhone 7)");

// => In request header:
// User-Agent = "My-Amazion-App/1.0.0 (iOS 10.3, iPhone 7)"
```
"""
[[Methods.parameters]]
name = "agent"
type = "string"
summary = "The new user agent string to use."

[[Methods]]
name = "GetUserAgent"
syntax = "GetUserAgent()"
returnType = "string"
returnValue = "The user agent string in use."
summary = "Gets the user agent string currently used in web view. If a customized user agent is not set, the default user agent in current platform will be returned."
example = """
```csharp
// Gets the default user agent.
webView.GetUserAgent()
// => "Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 ..."
// This value varies in different platforms.

// Sets a user agent and then get it.
webView.SetUserAgent("My-Amazion-App/1.0.0 (iOS 10.3, iPhone 7)");
webView.GetUserAgent()
// => "My-Amazion-App/1.0.0 (iOS 10.3, iPhone 7)"
```
"""

[[Methods]]
name = "SetAllowAutoPlay"
syntax = "SetAllowAutoPlay(bool flag)"
returnType = "void"

summary = """
Set allow auto play for current web view. By default, 
users need to touch the play button to start playing a media resource.

By setting this to `true`, you could start the playing automatically through
corresponding media [tag attributes](https://www.w3schools.com/tags/att_video_autoplay.asp).
"""
notice = "You need to set it before creating a web view. Existing web views are not affected."
example = """
```csharp
UniWebView.SetAllowAutoPlay(true);

// Create a new web view.
var webView = gameObject.AddComponent<UniWebView>();

// Now load and open a page which contains auto-started video to try
webView.Load("https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_video_autoplay");
webView.Show();
```
"""

[[Methods.badges]]
name = "static"
color = "blue"

[[Methods.parameters]]
name = "flag"
type = "bool"
summary = "A flag indicates whether autoplaying of media is allowed or not."

[[Methods]]
name = "SetAllowInlinePlay"
syntax = "SetAllowInlinePlay(bool flag)"
returnType = "void"
summary = """
Set allow inline play for current web view. By default, on iOS, the video 
can only be played in a new full screen view.

By setting this to `true`, you could play a video inline the page, instead of opening 
a new full screen window.

This only works for iOS and macOS Editor. 
On Android, you could play videos inline by default and calling this method does nothing.
"""
notice = "You need to set it before creating a web view. Existing web views are not affected."
example = """
```csharp
UniWebView.SetAllowInlinePlay(true);

// Create a new web view.
var webView = gameObject.AddComponent<UniWebView>();

// Now load and open a page which contains auto-started video to try
webView.Load("https://example.com/inline-video");
webView.Show();
```
"""
[[Methods.badges]]
name = "static"
color = "blue"
[[Methods.badges]]
name = "iOS"
color = "orange"
[[Methods.parameters]]
name = "flag"
type = "bool"
summary = "A flag indicates whether inline playing of media is allowed or not."

[[Methods]]
name = "SetJavaScriptEnabled"
syntax = "SetJavaScriptEnabled(bool enabled)"
returnType = "void"
summary = """
Sets whether JavaScript should be enabled in current web view. Default is enabled.

For a modern page, you may always want JavaScript enabled. However, if you could confirm that you are
not using any JavaScript in your page, you could turn it off to get better performance and safety.
"""
notice = "You need to set it before creating a web view. Existing web views are not affected."
example = """
```csharp
// Disable JavaScript in web views created later.
UniWebView.SetJavaScriptEnabled(false);

// JavaScript is disabled in this web view.
var webView = gameObject.AddComponent<UniWebView>();
```
"""
[[Methods.badges]]
name = "static"
color = "blue"
[[Methods.parameters]]
name = "enabled"
type = "bool"
summary = "Whether JavaScript should be enabled."